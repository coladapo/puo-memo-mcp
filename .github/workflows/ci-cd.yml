name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality Checks
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Node dependencies
        run: npm ci
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black mypy
      
      - name: Run ESLint
        run: npm run lint || true
      
      - name: Run Python linters
        run: |
          flake8 src/api --max-line-length=120
          black --check src/api
          mypy src/api --ignore-missing-imports

  # MCP Server Tests
  test-mcp-server:
    name: Test MCP Server
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          npm ci
          python -m pip install -r requirements.txt
      
      - name: Start mock API server
        run: |
          python src/api/mock_api.py &
          sleep 5
      
      - name: Run MCP comprehensive tests
        run: |
          export PUO_MEMO_API_URL=http://localhost:8001
          export PUO_MEMO_API_KEY=test-api-key
          node test/mcp-comprehensive-test.js
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: mcp-test-results
          path: test-report.json

  # API Tests
  test-api:
    name: Test Production API
    runs-on: ubuntu-latest
    needs: lint-and-format
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: puomemo
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: puomemo_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-api.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Run migrations
        env:
          DATABASE_URL: postgresql+asyncpg://puomemo:testpass@localhost:5432/puomemo_test
        run: |
          python -c "
          import asyncio
          from sqlalchemy.ext.asyncio import create_async_engine
          from src.api.production_api import Base
          
          async def create_tables():
              engine = create_async_engine('$DATABASE_URL')
              async with engine.begin() as conn:
                  await conn.run_sync(Base.metadata.create_all)
              await engine.dispose()
          
          asyncio.run(create_tables())
          "
      
      - name: Run API tests
        env:
          DATABASE_URL: postgresql+asyncpg://puomemo:testpass@localhost:5432/puomemo_test
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test
        run: |
          pytest test/test_production_api.py -v --cov=src/api --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          name: api-coverage

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit
        run: npm audit --production || true
      
      - name: Run pip-audit
        run: |
          pip install pip-audit
          pip-audit || true

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-mcp-server, test-api]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.api
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Compose
        run: |
          docker compose version
      
      - name: Start services
        run: |
          docker compose up -d
          sleep 30  # Wait for services to be ready
      
      - name: Run integration tests
        run: |
          docker compose exec -T api pytest test/integration/ -v
      
      - name: Check service health
        run: |
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:9090/-/healthy || exit 1  # Prometheus
      
      - name: Stop services
        if: always()
        run: docker compose down -v

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment steps here
          # e.g., kubectl apply, terraform apply, etc.

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan]
    if: github.event_name == 'release'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment steps here
          
      - name: Create release notes
        uses: softprops/action-gh-release@v1
        with:
          files: |
            CHANGELOG.md
            dist/*
          generate_release_notes: true

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test-mcp-server, test-api, build-images]
    if: failure()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'CI/CD Pipeline failed for ${{ github.repository }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: env.SLACK_WEBHOOK != ''

  # Performance Benchmarks
  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run performance tests
        run: |
          docker compose -f docker-compose.benchmark.yml up --abort-on-container-exit
      
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'customBiggerIsBetter'
          output-file-path: benchmark-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true