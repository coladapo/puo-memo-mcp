#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const os = require('os');

// Colors for terminal output
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m'
};

function log(message, color = 'reset') {
  console.error(`${colors[color]}${message}${colors.reset}`);
}

function findPython() {
  const commands = process.platform === 'win32' 
    ? ['python', 'python3', 'py -3'] 
    : ['python3', 'python'];
  
  for (const cmd of commands) {
    try {
      const result = require('child_process').execSync(`${cmd} --version`, { 
        encoding: 'utf8',
        stdio: ['ignore', 'pipe', 'ignore']
      });
      if (result.includes('Python 3.')) {
        return cmd;
      }
    } catch (e) {
      // Continue to next command
    }
  }
  return null;
}

function checkPythonVersion(pythonCmd) {
  try {
    const result = require('child_process').execSync(`${pythonCmd} -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')"`, {
      encoding: 'utf8',
      stdio: ['ignore', 'pipe', 'ignore']
    });
    const version = parseFloat(result.trim());
    return version >= 3.8;
  } catch (e) {
    return false;
  }
}

function checkDependencies(pythonCmd, packageDir) {
  const requiredPackages = ['aiohttp', 'pydantic', 'python-dotenv', 'requests'];
  const missing = [];
  
  for (const pkg of requiredPackages) {
    try {
      require('child_process').execSync(`${pythonCmd} -c "import ${pkg}"`, {
        stdio: 'ignore'
      });
    } catch (e) {
      missing.push(pkg);
    }
  }
  
  return missing;
}

async function installDependencies(pythonCmd, packageDir) {
  log('Installing Python dependencies...', 'yellow');
  const requirementsPath = path.join(packageDir, 'requirements.txt');
  
  return new Promise((resolve, reject) => {
    const pip = spawn(pythonCmd, ['-m', 'pip', 'install', '-r', requirementsPath], {
      stdio: 'inherit'
    });
    
    pip.on('close', (code) => {
      if (code === 0) {
        log('Dependencies installed successfully!', 'green');
        resolve();
      } else {
        reject(new Error(`Failed to install dependencies (exit code ${code})`));
      }
    });
  });
}

async function main() {
  // Handle --help flag
  if (process.argv.includes('--help') || process.argv.includes('-h')) {
    console.log(`
PUO Memo MCP Server

Usage: puo-memo-mcp [options]

Options:
  -h, --help    Show this help message

Environment Variables:
  PUO_MEMO_API_KEY    Your PUO Memo API key (required)
  PUO_MEMO_API_URL    API URL (optional, defaults to https://api.puo-memo.com)

For more information, visit: https://github.com/coladapo/puo-memo-mcp
`);
    process.exit(0);
  }

  const packageDir = path.resolve(__dirname, '..');
  const serverPath = path.join(packageDir, 'src', 'mcp', 'server.py');
  
  // Check if server file exists
  if (!fs.existsSync(serverPath)) {
    log(`Error: MCP server not found at ${serverPath}`, 'red');
    process.exit(1);
  }
  
  // Find Python
  const pythonCmd = findPython();
  if (!pythonCmd) {
    log('Error: Python 3 is required but not found in PATH.', 'red');
    log('\nPlease install Python 3.8 or later from https://www.python.org/downloads/', 'yellow');
    log('After installation, make sure Python is in your PATH and try again.', 'yellow');
    process.exit(1);
  }
  
  // Check Python version
  if (!checkPythonVersion(pythonCmd)) {
    log('Error: Python 3.8 or later is required.', 'red');
    log(`Found: ${pythonCmd}`, 'yellow');
    process.exit(1);
  }
  
  // Check dependencies
  const missingDeps = checkDependencies(pythonCmd, packageDir);
  if (missingDeps.length > 0) {
    log(`Missing Python packages: ${missingDeps.join(', ')}`, 'yellow');
    
    // Check if running in CI or non-interactive environment
    if (process.env.CI || !process.stdout.isTTY) {
      log('Running in non-interactive mode. Please install dependencies manually:', 'yellow');
      log(`  ${pythonCmd} -m pip install ${missingDeps.join(' ')}`, 'blue');
      process.exit(1);
    }
    
    // Try to install dependencies
    try {
      await installDependencies(pythonCmd, packageDir);
    } catch (error) {
      log('Failed to install dependencies automatically.', 'red');
      log('Please run manually:', 'yellow');
      log(`  ${pythonCmd} -m pip install -r ${path.join(packageDir, 'requirements.txt')}`, 'blue');
      process.exit(1);
    }
  }
  
  // Set up environment
  process.env.PYTHONPATH = packageDir;
  
  // Launch the Python MCP server
  log('Starting PUO Memo MCP server...', 'green');
  
  const server = spawn(pythonCmd, [serverPath], {
    stdio: 'inherit',
    env: { ...process.env, PYTHONPATH: packageDir }
  });
  
  server.on('error', (err) => {
    log(`Failed to start server: ${err.message}`, 'red');
    process.exit(1);
  });
  
  server.on('close', (code) => {
    if (code !== null && code !== 0) {
      log(`Server exited with code ${code}`, 'red');
    }
    process.exit(code || 0);
  });
  
  // Handle signals
  process.on('SIGINT', () => {
    server.kill('SIGINT');
  });
  
  process.on('SIGTERM', () => {
    server.kill('SIGTERM');
  });
}

// Run the main function
main().catch((err) => {
  log(`Unexpected error: ${err.message}`, 'red');
  process.exit(1);
});